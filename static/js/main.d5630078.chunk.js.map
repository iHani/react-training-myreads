{"version":3,"sources":["BooksAPI.js","ShelfChanger/ShelfChanger.js","Card/Card.js","Shelf/Shelf.js","HomePage/HomePage.js","HomePage/index.js","SearchPage/SearchPage.js","App.js","serviceWorker.js","index.js"],"names":["api","process","token","localStorage","headers","ShelfChanger","value","bookId","className","onChange","e","book","shelf","id","target","fetch","method","body","JSON","stringify","then","res","json","window","location","reload","disabled","Card","image","title","authors","src","alt","map","author","index","key","Shelf","props","books","HomePage","state","currentlyReading","wantToRead","read","data","forEach","push","imageLinks","thumbnail","subtitle","setState","Fragment","this","to","React","Component","defaultProps","reading","SearchPage","console","log","query","Array","isArray","type","handleChange","bind","App","path","exact","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d5630078.chunk.js","sourcesContent":["\nconst api = process.env.REACT_APP_ENDPOINT\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = process.env.REACT_APP_TOKEN || Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './ShelfChanger.css'\nimport * as API from '../BooksAPI'\n\nconst ShelfChanger = ({value = 'none', bookId}) => {\n    function handlerChangeSelect(e){\n        API.update({id:bookId}, e.target.value).then(() => window.location.reload())\n    }\n    return <div className=\"shelf-changer\">\n        <select value={value} onChange={handlerChangeSelect}>\n            <option value=\"none\" disabled>Mover para...</option>\n            <option value=\"currentlyReading\">Tô lendo</option>\n            <option value=\"wantToRead\">Quero ler</option>\n            <option value=\"read\">Já li</option>\n            <option value=\"none\">Nada</option>\n        </select>\n    </div>\n}\nShelfChanger.propTypes = {\n    value: PropTypes.string\n}\nexport default ShelfChanger","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Card.css'\nimport ShelfChanger from '../ShelfChanger'\n/**\n * PROPS\n * {\n * image: {src, alt},\n * title,\n * authors\n * }\n*/\nconst Card = ({ image, title, authors, shelf, id }) => {\n    //DESTRUCTURING\n    //const {image, title} = props\n    return <div className=\"card\">\n        <img src={image.src} alt={image.alt} />\n        <p>{title}</p>\n        <ul>\n            {authors.map(function (author, index) {\n                return <li key={index}>{author}</li>\n            })}\n        </ul>\n        <ShelfChanger value={shelf} bookId={id}/>\n    </div>\n}\nCard.propTypes = {\n    image: PropTypes.shape({ src: PropTypes.string, alt: PropTypes.string }).isRequired,\n    id: PropTypes.string.isRequired\n}\n\nexport default Card","import React, { Fragment } from 'react'\nimport Card from '../Card'\n\nconst Shelf = (props) => {\n    return <Fragment>\n        <h3>{props.title}</h3>\n        <div className=\"row\">\n            {props.books.map((book) => {\n                return <div className=\"col-md-3\" key={book.id}>\n                    <Card title={book.title}\n                        image={{ src: book.image.src, alt: book.image.alt }}\n                        authors={book.authors}\n                        shelf={book.shelf}\n                        id={book.id}\n                    />\n                </div>\n            })}\n        </div>\n    </Fragment>\n}\nexport default Shelf","import React from \"react\";\nimport \"./HomePage.css\";\nimport Shelf from '../Shelf'\nimport {\n  Link\n} from \"react-router-dom\";\nimport * as API from '../BooksAPI'\n\nclass HomePage extends React.Component {\n  state = {\n    currentlyReading: [],\n    wantToRead: [],\n    read: [],\n  }\n\n  componentDidMount(){\n    API.getAll().then(books => {\n      let currentlyReading = []\n      let wantToRead = []\n      let read = []\n      books.forEach(book => {\n        if(book.shelf === \"currentlyReading\"){\n          currentlyReading.push({\n            id: book.id,\n            title: book.title,\n            authors: book.authors || [],\n            image: {\n                src: book.imageLinks.thumbnail,\n                alt: book.subtitle\n            },\n            shelf: book.shelf\n          })\n        }\n        if(book.shelf === \"wantToRead\"){\n          wantToRead.push({\n            id: book.id,\n            title: book.title,\n            authors: book.authors || [],\n            image: {\n                src: book.imageLinks.thumbnail,\n                alt: book.subtitle\n            },\n            shelf: book.shelf\n          })\n        }\n        if(book.shelf === \"read\"){\n          read.push({\n            id: book.id,\n            title: book.title,\n            authors: book.authors || [],\n            image: {\n                src: book.imageLinks && book.imageLinks.thumbnail,\n                alt: book.subtitle\n            },\n            shelf: book.shelf\n          })\n        }\n      })\n      this.setState({currentlyReading, wantToRead, read})\n    })\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <h1 className=\"list-books-title\">Minhas leituras</h1>\n        <div className=\"container home\">\n          <Shelf title=\"Tô lendo\" books={this.state.currentlyReading} />\n          <Shelf title=\"Quero ler\" books={this.state.wantToRead} />\n          <Shelf title=\"Já li\" books={this.state.read} />\n          <Link to=\"/search\" className=\"search-link\">+</Link>\n        </div>\n      </React.Fragment>\n    );\n  }\n  static defaultProps = {\n    reading: [{\n      id: 1,\n      title: 'Titulo do livro 01',\n      image: { src: \"http://placekitten.com/200/300\", alt: \"It's an cat\" },\n      authors: ['autor 01', 'autor 2']\n    },\n    {\n      id: 2,\n      title: 'Titulo do livro 02',\n      image: { src: \"http://placekitten.com/200/300\", alt: \"It's an cat\" },\n      authors: ['autor 01', 'autor 2']\n    },\n    {\n      id: 3,\n      title: 'Titulo do livro 03',\n      image: { src: \"http://placekitten.com/200/300\", alt: \"It's an cat\" },\n      authors: ['autor 01', 'autor 2']\n    }]\n  }\n}\nexport default HomePage;\n","import HomePage from './HomePage'\nexport default HomePage","import React, { Component, Fragment } from 'react'\nimport {\n    Link\n} from \"react-router-dom\";\nimport './SearchPage.css'\nimport Card from '../Card'\nimport * as API from '../BooksAPI'\n\nclass SearchPage extends Component {\n    state = {\n        value: \"\",\n        books: []\n    }\n    componentDidMount() {\n        console.log('MONTOU')\n    }\n    componentWillUnmount() {\n        console.log('DESMONTOU')\n    }\n    shouldComponentUpdate(props, state) {\n        console.log('ATUALIZOU ALGUMA COISA')\n        return true\n    }\n    handleChange(e) {\n        this.setState({ value: e.target.value })\n        API.search(e.target.value).then(e => {\n            if (Array.isArray(e)) {\n                const books = e.map(book => {\n                    return {\n                        id: book.id,\n                        title: book.title,\n                        authors: book.authors || [],\n                        image: {\n                            src: book.imageLinks && book.imageLinks.thumbnail,\n                            alt: book.subtitle\n                        },\n                        shelf: book.shelf\n                    }\n                })\n                this.setState({ books: books })\n            }\n        })\n    }\n    render() {\n        return <Fragment>\n            <div className=\"search\">\n                <Link to=\"/\" >Voltar</Link>\n                <input type=\"text\" value={this.state.value} onChange={this.handleChange.bind(this)}></input>\n            </div>\n            <div className=\"container\">\n                <div className=\"row\">\n                    {this.state.books.map((book) => {\n                        return <div className=\"col-md-3\" key={book.id}>\n                            <Card title={book.title}\n                                image={{ src: book.image.src, alt: book.image.alt }}\n                                authors={book.authors}\n                                shelf={book.shelf}\n                                id={book.id}\n                            />\n                        </div>\n                    })}\n                </div>\n            </div>\n        </Fragment>\n    }\n}\nexport default SearchPage","import React from 'react';\nimport HomePage from './HomePage'\nimport SearchPage from './SearchPage'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/search\">\n          <SearchPage />\n        </Route>\n        <Route exact path=\"/\">\n          <HomePage />\n        </Route>\n        <Route>\n          <div>Not found</div>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}